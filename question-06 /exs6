#include <stdio.h>
#include <pthread.h>
#include <stdint.h>
#include <stdlib.h>

#define MAX_THREADS 4

typedef struct {
    int inicio;
    int passo;
    int final;
    int chunk_size;
    void (*f)(int);
} ThreadArgs;

// função de thread para escalonamento estático
void* thread_function_static(void* args) {
    ThreadArgs* thread_args = (ThreadArgs*)args;

    for (int i = thread_args->inicio; i < thread_args->final; i += thread_args->passo) {
        thread_args->f(i);
    }

    return NULL;
}

// função de thread para escalonamento dinâmico
void* thread_function_dynamic(void* args) {
    ThreadArgs* thread_args = (ThreadArgs*)args;
    int current_iteration = thread_args->inicio;

    while (current_iteration < thread_args->final) {
        int next_iteration = current_iteration + thread_args->chunk_size * thread_args->passo;
        if (next_iteration > thread_args->final) {
            next_iteration = thread_args->final;
        }

        for (int i = current_iteration; i < next_iteration; i += thread_args->passo) {
            thread_args->f(i);
        }

        current_iteration = next_iteration;
    }

    return NULL;
}

// função de thread para escalonamento orientado
void* thread_function_guided(void* args) {
    ThreadArgs* thread_args = (ThreadArgs*)args;
    int current_iteration = thread_args->inicio;

    while (current_iteration < thread_args->final) {
        int remaining_iterations = thread_args->final - current_iteration;
        int chunk_iterations = remaining_iterations / thread_args->chunk_size;
        if (chunk_iterations < thread_args->passo) {
            chunk_iterations = thread_args->passo;
        }

        int next_iteration = current_iteration + chunk_iterations * thread_args->passo;
        if (next_iteration > thread_args->final) {
            next_iteration = thread_args->final;
        }

        for (int i = current_iteration; i < next_iteration; i += thread_args->passo) {
            thread_args->f(i);
        }

        current_iteration = next_iteration;
    }

    return NULL;
}

// função omp_for que simula a API OMP
void omp_for(int inicio, int passo, int final, int schedule, int chunk_size, void (*f)(int)) {
    int num_threads = MAX_THREADS;
    pthread_t threads[MAX_THREADS];
    ThreadArgs thread_args[MAX_THREADS];

    int num_iterations = (final - inicio + passo - 1) / passo;
    int iterations_per_thread = (num_iterations + num_threads - 1) / num_threads;

    for (int i = 0; i < num_threads; i++) {
        thread_args[i].inicio = inicio + i * iterations_per_thread * passo;
        thread_args[i].passo = passo;
        thread_args[i].final = thread_args[i].inicio + iterations_per_thread * passo;
        if (thread_args[i].final > final) {
            thread_args[i].final = final;
        }
        thread_args[i].chunk_size = chunk_size;
        thread_args[i].f = f;

        switch (schedule) {
            case 0: // static
                pthread_create(&threads[i], NULL, thread_function_static, &thread_args[i]);
                break;
            case 1: // dynamic
                pthread_create(&threads[i], NULL, thread_function_dynamic, &thread_args[i]);
                break;
            case 2: // guided
                pthread_create(&threads[i], NULL, thread_function_guided, &thread_args[i]);
                break;
            default:
                printf("Invalid schedule type\n");
                exit(1);
        }
    }

    for (int i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }
}

int main() {
    void example_function(int i) {
        printf("Thread %lu: %d\n", (unsigned long)pthread_self(), i);
    }

    int schedule_type = 0; // tipo de escalonamento: 0 para static, 1 para dynamic, 2 para guided

    omp_for(0, 1, 10, schedule_type, 3, example_function);

    return 0;
}
